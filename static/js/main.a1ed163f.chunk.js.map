{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","onInputChange","className","type","placeholder","onChange","Card","id","name","email","alt","src","Scroll","props","style","overflow","border","height","children","App","event","setState","searchInput","target","value","state","robots","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","map","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a1ed163f.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({ onInputChange }) => {\n  return(\n    <div>\n      <input\n        className=' pa2 mb2 bg-washed-green ba br2 bw2 b--washed-green'\n        type='text'\n        placeholder='search robots'\n        onChange={onInputChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return(\n    <div className='ba bw2 br2 ma2 dib bg-light-green b--light-green shadow-5'>\n      <img\n        alt='robots'\n        src={`https://robohash.org/${id}?size=200x200`}\n      />\n      <div>\n        <h2>{name}</h2>\n        <h4>{email}</h4>\n      </div>\n    </div>\n  );\n\n};\n\nexport default Card;","import React from 'react';\n\nconst Scroll = (props) => {\n  return(\n    <div style={{overflow:'scroll', border:'5px solid black', height:'800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from '../components/SearchBox';\nimport Card from '../components/Card';\nimport Scroll from \"../components/Scroll\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n      searchInput: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({robots: users}));\n  }\n\n  onInputChange = (event) => {\n    this.setState({searchInput: event.target.value});\n  };\n\n  render() {\n    const { robots, searchInput } = this.state;\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchInput.toLowerCase()));\n    return !robots.length\n      ? <h1>Loading</h1>\n      : <div className='tc'>\n          <p className='f1'>ROBOFRIENDS</p>\n          <SearchBox onInputChange={this.onInputChange}/>\n          <Scroll>\n            {filteredRobots.map(robot => {\n              return <Card id={robot.id} name={robot.name} email={robot.email}/>\n            })}\n          </Scroll>\n        </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}